import streamlit as st
import openai
from openai import OpenAI
import db
import pw_check as pw
import parameters as par
import llm_provider
import chat_ui

 #Passwort checken
if pw.check_password() == False:
    st.stop()

# Inject modern chat UI CSS
chat_ui.inject_chat_css()

client = OpenAI()
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Initialisiere session_state-variablen
if "sop_bot" not in st.session_state:
    st.session_state["sop_bot"] = db.get_bot("Assistent")
    st.session_state["sop_bot_name"] = st.session_state.sop_bot["bot_name"]
    st.session_state["sop_sys_prompt"] = st.session_state.sop_bot["sys_prompt"]
    st.session_state["sop_model"] = st.session_state.sop_bot["model"]
    st.session_state["sop_model_if_error"] = st.session_state.sop_bot["model_if_error"]
    st.session_state["sop_temp"] = st.session_state.sop_bot["temp"]

if "teacher_bot" not in st.session_state:
    st.session_state["teacher_bot"] = db.get_bot("Teacher")
    st.session_state["teacher_bot_name"] = st.session_state.teacher_bot["bot_name"]
    st.session_state["teacher_sys_prompt"] = st.session_state.teacher_bot["sys_prompt"]
    st.session_state["teacher_temp"] = st.session_state.teacher_bot["temp"]
    st.session_state["teacher_model"] = st.session_state.teacher_bot["model"]
    st.session_state["teacher_model_if_error"] = st.session_state.teacher_bot["model_if_error"]

if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": st.session_state.sop_sys_prompt}]

if "displayed_messages" not in st.session_state:
    st.session_state.displayed_messages = []

if "teacher_messages" not in st.session_state:
    st.session_state.teacher_messages = []

if "completed_exercises" not in st.session_state:
    st.session_state.completed_exercises = set()

# Display modern chat header
chat_ui.display_chat_header(
    bot_name="School-of-Prompting",
    model=st.session_state.sop_model if "sop_model" in st.session_state else None,
    description="üéØ KI-gest√ºtzte Arbeit in der Ergotherapie - datenschutzkonform und praxistauglich"
)

# Kurze, klare Einf√ºhrung (immer sichtbar, kein Expander)
st.markdown("""
### üí° Was macht die School of Prompting besonders?

**√úbe hier nur, was du sp√§ter auch wirklich so nutzen darfst.**

Alle √úbungen sind datenschutzkonform und arbeiten **ohne Klientendaten**. Du lernst KI f√ºr:
- üìã Informationsmaterialien erstellen
- üîç Fachkonzepte erschlie√üen und Literatur aufbereiten
- üéØ Therapieplanung vorbereiten (generisch)
- ü§î Reflexion und Perspektivwechsel
""")

# Optionaler Expander f√ºr mehr Details
with st.expander("‚ÑπÔ∏è Mehr √ºber Prompting-Techniken", False):
    st.markdown("""
    ### Die Techniken im √úberblick
    
    **Zero-Shot:** Direkte Anweisung ohne Beispiele - f√ºr klare, strukturierte Aufgaben
    
    **One-Shot:** Ein Beispiel als Vorlage - f√ºr einheitliche Formate
    
    **Few-Shot:** Mehrere Beispiele zeigen das Muster - f√ºr komplexere Transformationen
    
    **Chain-of-Thought:** Schrittweise Denkprozesse - f√ºr komplexe Aufgaben
    
    **Skala:** Anpassung entlang einer Skala - f√ºr verschiedene Zielgruppen
    
    **Role:** Perspektivwechsel durch Rollenzuweisung - f√ºr Reflexion
    
    **Constraint:** Klare Begrenzungen setzen - f√ºr fokussierte Ergebnisse
    """)

# Dictionary mit Aufgabenstellungen
task_messages = {
    "Zero-Shot Prompting": {
        "Informationsblatt Ergonomie": {
            "task": """üéØ Lernziel: Entwickle einen pr√§zisen Zero-Shot Prompt f√ºr ein Informationsblatt

**Aufgabe:**
Erstelle ein Informationsblatt zum Thema "Ergonomie am Arbeitsplatz" f√ºr eine Praxis oder WfbM.

**Experimentiere mit verschiedenen Aspekten:**
- Wie beeinflusst die **Zielgruppe** das Ergebnis? (z.B. B√ºroarbeiter vs. WfbM-Mitarbeiter)
- Was bewirkt eine **L√§ngenvorgabe**? (z.B. "Eine DIN A4 Seite", "5 Tipps")
- Wie wirkt sich der **Sprachstil** aus? (z.B. "Kurz und knapp", "Motivierend", "Mit Beispielen")
- Was passiert bei **Strukturvorgaben**? (z.B. "Mit √úberschriften", "Als Checkliste")

**Beispiel-Prompt zum Start:**
"Erstelle ein Informationsblatt √ºber ergonomisches Sitzen am Arbeitsplatz f√ºr eine Werkstatt f√ºr Menschen mit Behinderung. Das Blatt soll eine DIN A4 Seite lang sein, in einfacher Sprache geschrieben und 5 konkrete Tipps enthalten."

‚úÖ **Praxistauglich:** Du kannst solche Informationsbl√§tter jederzeit f√ºr deine Praxis erstellen!""",
            "hint": "üí≠ Vergleiche die Ergebnisse bei unterschiedlichen Zielgruppen und Stilangaben. Was macht den gr√∂√üten Unterschied?",
        },
        "Traumreise": {
            "task": """üéØ Lernziel: Entwickle einen strukturierten Zero-Shot Prompt f√ºr therapeutische Inhalte

**Aufgabe:**
Erstelle eine kurze Traumreise (3-5 Minuten) als Einstieg f√ºr eine Gruppentherapie.

**Entscheide dich f√ºr:**
- **Zielgruppe:** Kinder? Erwachsene? Senior:innen? Menschen mit kognitiven Einschr√§nkungen?
- **Thema:** Wald? Strand? Garten? Berge? Abstrakt (Farben, Formen)?
- **Zielsetzung:** Entspannung? Aktivierung? Ankommen in der Gruppe?

**Experimentiere mit der Struktur:**
- Offene Anfrage: "Erstelle eine Traumreise zum Thema Wald"
- Strukturierte Anfrage: "Erstelle eine Traumreise mit Einleitung, 3 Stationen und R√ºckholung"
- Mit Sprachvorgaben: "In einfacher, ruhiger Sprache"
- Mit Zeitangabe: "F√ºr genau 5 Minuten Vorlesezeit"

**Beispiel-Prompt:**
"Erstelle eine 3-min√ºtige Traumreise zum Thema 'Fr√ºhlingsgarten' f√ºr eine Seniorengruppe. Die Sprache soll ruhig und bildreich sein. Gliedere sie in: Ankommen, 3 Sinneserlebnisse, sanfte R√ºckholung."

‚úÖ **Praxistauglich:** Solche Traumreisen kannst du f√ºr deine Gruppen vorbereiten!""",
            "hint": "üí≠ Achte darauf, wie die Detailtiefe deiner Anweisung das Ergebnis beeinflusst.",
        },
        "Beratungskonzept strukturieren": {
            "task": """üéØ Lernziel: Entwickle einen Zero-Shot Prompt f√ºr die Vorbereitung von Beratungen

**Aufgabe:**
Entwickle ein strukturiertes Konzept f√ºr ein Beratungsgespr√§ch zu einem therapeutischen Thema.

**M√∂gliche Themen:**
- Gelenkschutz im Alltag (f√ºr Menschen mit Arthrose)
- Umgang mit Energiehaushalt (f√ºr Menschen mit chronischer Ersch√∂pfung)  
- Sturzprophylaxe im h√§uslichen Umfeld (f√ºr Senior:innen)
- Konzentration bei Hausaufgaben (f√ºr Eltern von Kindern mit ADHS)
- Selbstst√§ndigkeit f√∂rdern (f√ºr Angeh√∂rige von Menschen mit Demenz)

**Experimentiere mit verschiedenen Strukturen:**
- "Erstelle einen Gespr√§chsleitfaden f√ºr..."
- "Strukturiere eine 30-min√ºtige Beratung zu..."
- "Entwickle ein Beratungskonzept mit Einstieg, Hauptteil, Abschluss f√ºr..."

**Was soll enthalten sein?**
- Gespr√§chseinstieg / Warm-Up
- Kernbotschaften / Wissensvermittlung
- Praktische Tipps / Alltagsbeispiele
- Materialien zum Mitnehmen
- Gespr√§chsabschluss

**Beispiel-Prompt:**
"Erstelle ein Konzept f√ºr eine 20-min√ºtige Angeh√∂rigenberatung zum Thema 'Gelenkschutz im Alltag bei Arthrose'. Gliedere es in: Einstieg, 5 Kernprinzipien mit Alltagsbeispielen, h√§ufige Fragen, Abschluss."

‚úÖ **Praxistauglich:** Diese Konzepte helfen dir, Beratungen strukturiert vorzubereiten!""",
            "hint": "üí≠ Ein klares Konzept hilft dir, in der Beratung nichts zu vergessen und professionell aufzutreten.",
        }
    },
    "One-Shot Prompting": {
        "√úbungsanleitung erstellen": {
            "task": """üéØ Lernziel: Nutze One-Shot Prompting f√ºr einheitliche Formate

**Aufgabe:**
Du m√∂chtest f√ºr verschiedene √úbungen einheitliche Anleitungen erstellen. Gib der KI ein Beispiel als Vorlage.

**Beispiel-Anleitung (als Vorlage):**

---
**√úbung: M√ºnzen sortieren**

*Ziel:* Verbesserung der Feinmotorik und taktilen Wahrnehmung

*Material:* 
- Verschiedene M√ºnzen (1ct bis 2‚Ç¨)
- Kleine Sch√§lchen

*Durchf√ºhrung:*
1. M√ºnzen mischen und in eine Schale geben
2. Klient:in sortiert M√ºnzen nach Wert in verschiedene Sch√§lchen
3. Variation: Mit geschlossenen Augen nach Gef√ºhl sortieren

*Schwierigkeitsgrade:*
- Einfach: Gro√üe Wertunterschiede (1ct, 1‚Ç¨, 2‚Ç¨)
- Mittel: Alle M√ºnzwerte
- Schwer: Mit geschlossenen Augen

*Therapeutische Schwerpunkte:*
- Feinmotorische Pr√§zision
- Taktile Diskrimination
- Konzentration

---

**Deine Aufgabe:**
Erstelle nach diesem Muster Anleitungen f√ºr andere √úbungen:
- Kn√∂pfe sortieren nach Gr√∂√üe
- W√§scheklammern an Karton befestigen
- Schrauben und Muttern zusammenf√ºgen
- Perlen auf Schnur auff√§deln

**Experimentiere:**
- Wie explizit muss der Hinweis auf die Vorlage sein?
- Reicht: "Erstelle nach diesem Muster..."
- Oder brauchst du: "√úbernimm die Struktur mit Ziel, Material, Durchf√ºhrung..."

**Beispiel-Prompt:**
"Erstelle nach dem Muster der obigen √úbungsanleitung eine Anleitung f√ºr die √úbung 'W√§scheklammern an Karton befestigen'. Behalte die Struktur mit Ziel, Material, Durchf√ºhrung, Schwierigkeitsgraden und therapeutischen Schwerpunkten bei."

‚úÖ **Praxistauglich:** Erstelle dir einen Pool an einheitlich formatierten √úbungsanleitungen!""",
            "hint": "üí≠ One-Shot Prompting ist perfekt, um konsistente Formate f√ºr mehrere √§hnliche Aufgaben zu erstellen.",
        },
        "Infomaterial-Serie": {
            "task": """üéØ Lernziel: Erstelle eine Serie von Materialien nach einheitlichem Muster

**Aufgabe:**
Entwickle eine Serie von Infomaterialien zu einem Thema, die alle die gleiche Struktur haben.

**Beispiel-Thema: Gelenkschutz**

**Beispiel-Info #1 (als Vorlage):**

---
**GELENKSCHUTZ IN DER K√úCHE** üç≥

*Warum ist das wichtig?*
In der K√ºche arbeiten wir oft mit Kraft und in ung√ºnstigen Positionen. Das belastet die Gelenke unn√∂tig.

*Die 3 wichtigsten Prinzipien:*
1. **Gro√üe Griffe nutzen:** T√∂pfe und Pfannen mit dicken Griffen schonen die Fingergelenke
2. **Beide H√§nde einsetzen:** Schwere T√∂pfe mit beiden H√§nden tragen verteilt die Last
3. **Hilfsmittel verwenden:** Elektrische Dosen√∂ffner, Einhandr√ºhrger√§t, rutschfeste Unterlagen

*Konkrete Alltagstipps:*
- Gl√§ser mit beiden H√§nden √∂ffnen (eine Hand h√§lt, eine dreht)
- Flaschen mit Flaschen√∂ffner statt mit purer Handkraft √∂ffnen
- Messer mit dickem Griff und guter Sch√§rfe verwenden

---

**Deine Aufgabe:**
Erstelle nach diesem Muster weitere Info-Karten f√ºr:
- Gelenkschutz im Bad
- Gelenkschutz im Garten
- Gelenkschutz bei Haushaltsarbeiten
- Gelenkschutz beim Einkaufen

**Experimentiere:**
- Wie konkret muss die Vorlage sein?
- Was passiert, wenn du nur sagst: "Mache noch eine f√ºr das Bad"?
- Was, wenn du explizit die Struktur benennst?

**Beispiel-Prompt:**
"Erstelle nach dem Muster der Info-Karte 'Gelenkschutz in der K√ºche' eine weitere Karte zum Thema 'Gelenkschutz im Bad'. Behalte die Struktur bei: Warum wichtig?, 3 Prinzipien, Konkrete Alltagstipps."

‚úÖ **Praxistauglich:** So erstellst du einheitliche Info-Serien f√ºr deine Praxis!""",
            "hint": "üí≠ Eine Serie von Materialien mit einheitlichem Format wirkt professionell und ist f√ºr Klient:innen leichter zu nutzen.",
        }
    },
    "Few-Shot Prompting": {
        "Bet√§tigungsanalyse": {
            "task": """üéØ Lernziel: Entwickle Few-Shot Prompts f√ºr strukturierte Analysen

**Aufgabe:**
Analysiere Bet√§tigungen systematisch nach einem etablierten Muster.

**Beispiel-Analysen (als Vorlage):**

**1. Kaffee kochen**
- *Komponenten:* Wasser einf√ºllen, Filter einsetzen, Pulver dosieren, Maschine starten, warten, eingie√üen
- *Umweltfaktoren:* Arbeitsh√∂he, Wasserzugang, Steckdose, Bewegungsraum
- *Personenfaktoren:* Kraft, Feinmotorik, Sequenzplanung, Zeitverst√§ndnis
- *Bedeutung:* Morgenritual, Autonomie, Gastfreundschaft, sozialer Anlass

**2. Einkaufen gehen**
- *Komponenten:* Liste erstellen, Weg bew√§ltigen, orientieren, Produkte finden, bezahlen, transportieren
- *Umweltfaktoren:* Entfernung, Verkehrsmittel, Gesch√§ftslayout, Menschenmenge
- *Personenfaktoren:* Mobilit√§t, Orientierung, Entscheidungsf√§higkeit, Ausdauer, Kraft
- *Bedeutung:* Selbstversorgung, Autonomie, Teilhabe, Kompetenz

**3. Sich anziehen**
- *Komponenten:* Kleidung w√§hlen, Reihenfolge planen, Verschl√ºsse √∂ffnen/schlie√üen, koordinieren, Balance halten
- *Umweltfaktoren:* Sitzgelegenheit, Schrank zug√§nglich, Kleidung verf√ºgbar, Zeit
- *Personenfaktoren:* Feinmotorik, Grobmotorik, Planung, Gleichgewicht
- *Bedeutung:* Selbstbestimmung, soziale Norm, Selbstausdruck, W√ºrde

**Deine Aufgabe:**
Erstelle nach diesem Muster Analysen f√ºr:
- Z√§hne putzen
- Telefonieren
- Kochen (ein einfaches Gericht)
- W√§sche aufh√§ngen
- Sich schminken / rasieren
- Bus/Bahn fahren

**Experimentiere:**
- Wie viele Beispiele brauchst du mindestens? (Teste mit 1, 2, 3 Beispielen)
- Musst du die Kategorien erkl√§ren oder erkennt die KI das Muster?
- Was passiert, wenn du sehr unterschiedliche Bet√§tigungen w√§hlst?

**Beispiel-Prompt:**
"Analysiere nach dem Muster der drei obigen Beispiele die Bet√§tigung 'Telefonieren'. Nutze die gleichen Kategorien: Komponenten, Umweltfaktoren, Personenfaktoren, Bedeutung."

‚úÖ **Praxistauglich:** Bet√§tigungsanalysen helfen dir, therapeutische Ansatzpunkte zu identifizieren!""",
            "hint": "üí≠ Die KI erkennt das Muster aus den Beispielen. Je konsistenter deine Beispiele, desto besser das Ergebnis.",
        },
        "Aktivit√§tenpool erstellen": {
            "task": """üéØ Lernziel: Nutze Few-Shot f√ºr kreative Ideensammlungen

**Aufgabe:**
Erstelle einen Pool therapeutischer Aktivit√§ten f√ºr verschiedene Bet√§tigungsziele - ohne konkrete Klient:innen!

**Beispiele f√ºr: Bet√§tigung "Einkaufen"**

*Aktivit√§t 1: Supermarkt-Rollenspiel*
- Setting: Therapieraum mit Regalen und Produkten
- Durchf√ºhrung: Einkaufsliste abarbeiten, Produkte finden, Preise vergleichen, bezahlen
- Schwerpunkt: Orientierung, Planung, Handlungssequenzen, Kommunikation

*Aktivit√§t 2: Online-Bestellung planen*
- Setting: Computer/Tablet
- Durchf√ºhrung: Lebensmittel-Webshop erkunden, Warenkorb zusammenstellen, Bestellung simulieren
- Schwerpunkt: Digitale Kompetenz, Planung, Entscheidungsfindung

*Aktivit√§t 3: Men√ºplanung mit Einkaufsliste*
- Setting: Tisch mit Rezepten und Stift
- Durchf√ºhrung: Wochenmen√º planen, Zutaten auflisten, Mengen berechnen
- Schwerpunkt: Planung, Kognition, Exekutivfunktionen

**Deine Aufgabe:**
Erstelle nach diesem Muster Aktivit√§tenpools f√ºr:
- Bet√§tigung "Kochen"
- Bet√§tigung "Sich anziehen"
- Bet√§tigung "K√∂rperpflege"
- Bet√§tigung "Telefon nutzen"
- Bet√§tigung "Post erledigen"

**Experimentiere:**
- Wie spezifisch sollten deine Beispiele sein?
- Was passiert, wenn du unterschiedliche Schwierigkeitsgrade in den Beispielen zeigst?
- Kannst du Schwerpunkte vorgeben? (z.B. "Fokus auf kognitive Aspekte")

**Beispiel-Prompt:**
"Erstelle nach dem Muster der drei Beispiele f√ºr 'Einkaufen' einen Pool von 5 therapeutischen Aktivit√§ten f√ºr die Bet√§tigung 'Kochen'. Beschreibe jeweils Setting, Durchf√ºhrung und therapeutischen Schwerpunkt."

‚úÖ **Praxistauglich:** Baue dir einen Aktivit√§tenpool als Inspirationsquelle f√ºr die Therapieplanung!""",
            "hint": "üí≠ Ein breiter Aktivit√§tenpool gibt dir Flexibilit√§t in der Therapiegestaltung.",
        }
    },
    "Chain-of-Thought Prompting": {
        "Aushang Leichte Sprache": {
            "task": """üéØ Lernziel: Entwickle Chain-of-Thought Prompts f√ºr komplexe Aufgaben

**Aufgabe:**
Erstelle einen Aushang in Leichter Sprache f√ºr eine WfbM.

**Inhalt:** Ank√ºndigung der neuen "Morgensportrunde"
- Findet t√§glich um 9 Uhr statt
- F√ºr alle Mitarbeiter:innen, die Lust haben
- Ziel: Aktiv in den Tag starten

**Identifiziere die notwendigen Denkschritte:**

M√∂gliche Struktur:
1. **Zielgruppenanalyse:** Wer soll den Aushang lesen? Welches Sprachniveau?
2. **Kernbotschaft:** Was ist die wichtigste Information?
3. **Informationsaufbereitung:** Welche Details sind wichtig? Welche weglassen?
4. **Sprachliche Umsetzung:** Wie formuliere ich in Leichter Sprache?
5. **Formatentscheidung:** Wie sieht der Aushang aus? √úberschrift? Abs√§tze? Symbole?

**Experimentiere mit der Prompt-Struktur:**
- Gibst du alle Schritte vor oder l√§sst du die KI selbst strukturieren?
- Wie detailliert m√ºssen die Zwischenschritte sein?
- Was passiert, wenn du die KI bittest, ihre Gedanken zu zeigen?

**Beispiel-Prompt:**
"Erstelle einen Aushang f√ºr die WfbM √ºber die neue Morgensportrunde (t√§glich 9 Uhr, f√ºr alle). Gehe dabei schrittweise vor:
1. Analysiere die Zielgruppe und ihr Sprachniveau
2. Identifiziere die Kernbotschaft
3. W√§hle die wichtigen Informationen aus
4. Formuliere in Leichter Sprache mit kurzen S√§tzen
5. Strukturiere den Aushang √ºbersichtlich

Zeige jeden Denkschritt."

‚úÖ **Praxistauglich:** So erstellst du barrierefreie Informationen f√ºr verschiedene Settings!""",
            "hint": "üí≠ Die Aufteilung in Denkschritte hilft der KI, systematisch und nichts zu vergessen. Du kannst die Schritte auch selbst durchdenken und nur die Umsetzung von der KI machen lassen.",
        },
        "Hilfsmittel recherchieren": {
            "task": """üéØ Lernziel: Nutze Chain-of-Thought f√ºr strukturierte Recherche

**Aufgabe:**
Recherchiere Hilfsmittel f√ºr eine bestimmte Bet√§tigung - generisch, ohne konkrete Klient:in!

**Beispiel-Bet√§tigung:** "Essen mit Besteck"

**Entwickle einen Prompt mit folgenden Denkschritten:**

1. **Bet√§tigung analysieren**
   - Was geh√∂rt alles dazu?
   - Welche Teilschritte gibt es?
   - Was k√∂nnte schwierig sein?

2. **H√§ufige Einschr√§nkungen identifizieren**
   - Welche funktionellen Einschr√§nkungen beeintr√§chtigen diese Bet√§tigung typischerweise?
   - (z.B. bei "Essen mit Besteck": Greifkraft, Beweglichkeit, Koordination, Tremor)

3. **Hilfsmittelkategorien bestimmen**
   - Welche Kategorien von Hilfsmitteln gibt es?
   - (z.B. Besteck-Adaptionen, Teller-Adaptionen, Unterlagen)

4. **Konkrete Hilfsmittel recherchieren**
   - Welche spezifischen Hilfsmittel gibt es pro Kategorie?
   - F√ºr welche Einschr√§nkung ist welches geeignet?

5. **√úbersichtlich strukturieren**
   - Erstelle eine √úbersicht nach Einschr√§nkungen oder nach Hilfsmitteltypen

**Weitere Bet√§tigungen zum √úben:**
- Anziehen (Oberk√∂rper)
- K√∂rperpflege (Haare k√§mmen, Z√§hne putzen)
- Schreiben
- Telefonieren (Festnetz/Handy)
- T√ºren √∂ffnen

**Experimentiere:**
- Wie explizit m√ºssen die Schritte sein?
- Kannst du Schritte zusammenfassen?
- Was passiert, wenn du die KI bittest, selbst Schritte zu entwickeln?

**Beispiel-Prompt:**
"Recherchiere Hilfsmittel f√ºr die Bet√§tigung 'Essen mit Besteck'. Gehe dabei systematisch vor:
1. Analysiere die Bet√§tigung und ihre Teilschritte
2. Identifiziere h√§ufige Einschr√§nkungen, die diese Bet√§tigung erschweren
3. Bestimme Kategorien von Hilfsmitteln
4. Recherchiere konkrete Hilfsmittel pro Kategorie
5. Erstelle eine strukturierte √úbersicht

Zeige deine Denkschritte."

‚úÖ **Praxistauglich:** Diese Recherchen helfen dir, dein Hilfsmittelwissen aufzubauen!""",
            "hint": "üí≠ Strukturierte Recherche ist effizienter als unsystematisches Suchen. Die KI kann dir helfen, systematisch vorzugehen.",
        },
        "Literatur erschlie√üen": {
            "task": """üéØ Lernziel: Nutze Chain-of-Thought f√ºr Literaturarbeit

**Aufgabe:**
Erschlie√üe einen Fachartikel oder ein Buchkapitel strukturiert.

**Beispiel:** Du hast einen wissenschaftlichen Artikel zu einem therapeutischen Ansatz und m√∂chtest ihn f√ºr die Praxis aufbereiten.

**Entwickle einen Prompt mit folgenden Denkschritten:**

1. **√úberblick verschaffen**
   - Worum geht es grunds√§tzlich?
   - Was ist die Hauptaussage/These?

2. **Theoretischen Hintergrund erfassen**
   - Auf welcher Theorie/welchem Konzept basiert der Ansatz?
   - Welche Grundannahmen werden gemacht?

3. **Praktische Anwendung verstehen**
   - Wie wird der Ansatz konkret angewendet?
   - Welche Schritte/Methoden werden beschrieben?

4. **Evidenz bewerten**
   - Welche Studien/Belege werden genannt?
   - Wie stark ist die Evidenz?

5. **Praxisrelevanz einsch√§tzen**
   - F√ºr welche Klient:innen/Settings ist das relevant?
   - Was kann ich direkt umsetzen?
   - Was muss ich beachten?

6. **Zusammenfassung erstellen**
   - Fasse die Kernpunkte in 3-5 S√§tzen zusammen

**Anwendungsbeispiele:**
- CO-OP Ansatz (Cognitive Orientation to daily Occupational Performance)
- Affolter-Modell
- CMOP-E (Canadian Model of Occupational Performance and Engagement)
- Sensorische Integrationstherapie
- Perfetti-Konzept

**Experimentiere:**
- Kannst du den Original-Text in den Prompt einf√ºgen? (bei k√ºrzeren Texten)
- Oder gibst du nur das Thema vor und die KI recherchiert selbst?
- Wie detailliert sollen die einzelnen Schritte sein?

**Beispiel-Prompt:**
"Erschlie√üe mir den CO-OP Ansatz strukturiert. Gehe dabei vor in folgenden Schritten:
1. √úberblick: Was ist CO-OP?
2. Theoretischer Hintergrund: Auf welcher Grundlage basiert CO-OP?
3. Praktische Anwendung: Wie wird CO-OP konkret durchgef√ºhrt?
4. Evidenz: Welche Belege gibt es f√ºr die Wirksamkeit?
5. Praxisrelevanz: F√ºr wen ist CO-OP geeignet? Was muss ich beachten?
6. Zusammenfassung in 5 S√§tzen

Zeige jeden Schritt klar."

‚úÖ **Praxistauglich:** So erschlie√üt du dir neue Therapiekonzepte systematisch!""",
            "hint": "üí≠ Systematische Literaturarbeit spart Zeit und hilft dir, neue Konzepte schnell zu verstehen und zu bewerten.",
        }
    },
    "Skala Prompting": {
        "Was ist Bet√§tigung?": {
            "task": """üéØ Lernziel: Entwickle Skala-Prompts f√ºr verschiedene Sprachniveaus

**Aufgabe:**
Bereite die DVE-Definition von "Bet√§tigung" f√ºr verschiedene Zielgruppen auf.

**Die Original-Definition:**
"Unter Bet√§tigung verstehen Ergotherapeuten die Summe von Aktivit√§ten und Aufgaben des t√§glichen Lebens, die durch Individuen und Kultur benannt, strukturiert und mit Bedeutung versehen sind. Bet√§tigungen werden individuell unterschiedlich ausgef√ºhrt, sind Ausdruck unserer Pers√∂nlichkeit und lassen uns fortlaufend mit unserer Umwelt interagieren. Bet√§tigung geh√∂rt zu den Grundbed√ºrfnissen des Menschen und umfasst alles, was Menschen tun. Dazu geh√∂ren T√§tigkeiten zur Versorgung der eigenen Person (Selbstversorgung), zum Genuss des Lebens (Freizeit) und als Beitrag zur sozialen und √∂konomischen Entwicklung des Individuums und der Gemeinschaft (Produktivit√§t). Bedeutungsvolle Aktivit√§ten sind f√ºr den Menschen dadurch charakterisiert, dass sie zielgerichtet sind und als signifikant, sinnvoll und wertvoll f√ºr den Einzelnen empfunden werden."

(Quelle: Kohlhuber, Ergotherapie - bet√§tigungszentriert in Ausbildung und Praxis, 2020)

**Definiere deine Skala:**

Klassische Variante:
- Stufe 1 = Alltagssprache, sehr einfach
- Stufe 10 = Wissenschaftliche Fachsprache, komplex

Alternative Varianten:
- Stufe 1 = Leichte Sprache, Stufe 10 = Fachsprache f√ºr Expert:innen
- Stufe 1 = Jugendsprache/TikTok, Stufe 10 = Elaborierte Fachsprache
- Stufe 1 = F√ºr Kinder erkl√§rt, Stufe 10 = F√ºr Fachpublikation

**Experimentiere:**
1. Lass die KI zun√§chst die Original-Definition einsortieren
2. Verschiebe die Definition auf der Skala (z.B. auf Stufe 3 oder Stufe 8)
3. Probiere verschiedene Skalenendpunkte aus
4. Was passiert, wenn du Zwischenstufen definierst?

**Beispiel-Prompt:**
"Hier ist eine Definition von Bet√§tigung: [Definition einf√ºgen]

Erstelle eine Skala von 1-10, wobei:
- Stufe 1 = Alltagssprache, verst√§ndlich f√ºr alle
- Stufe 10 = Wissenschaftliche Fachsprache

Sortiere die Definition ein und erstelle dann eine Version auf Stufe 3 (einfache, aber korrekte Sprache f√ºr Klient:innen)."

‚úÖ **Praxistauglich:** So bereitest du Fachinhalte f√ºr unterschiedliche Zielgruppen auf!""",
            "hint": "üí≠ Die gleiche Information kann auf verschiedenen Sprachniveaus unterschiedlich wirken. Welches Niveau passt zu welcher Zielgruppe?",
        },
        "Was ist Ergotherapie?": {
            "task": """üéØ Lernziel: Passe Komplexit√§t gezielt an verschiedene Zielgruppen an

**Aufgabe:**
Erkl√§re "Was ist Ergotherapie?" f√ºr verschiedene Zielgruppen.

**Die DVE-Definition:**
"Ergotherapie unterst√ºtzt und begleitet Menschen jeden Alters, die in ihrer Handlungsf√§higkeit eingeschr√§nkt oder von Einschr√§nkung bedroht sind. Ziel ist, sie bei der Durchf√ºhrung f√ºr sie bedeutungsvoller Bet√§tigungen in den Bereichen Selbstversorgung, Produktivit√§t und Freizeit in ihrer pers√∂nlichen Umwelt zu st√§rken. Hierbei dienen spezifische Aktivit√§ten, Umweltanpassung und Beratung dazu, dem Menschen Handlungsf√§higkeit im Alltag, gesellschaftliche Teilhabe und eine Verbesserung seiner Lebensqualit√§t zu erm√∂glichen."

(Quelle: https://dve.info/ergotherapie/definition)

**M√∂gliche Zielgruppen und Sprachniveaus:**

- **Stufe 2-3:** F√ºr Kindergartenkinder
- **Stufe 4-5:** F√ºr Patient:innen ohne Vorerfahrung
- **Stufe 6-7:** F√ºr Angeh√∂rige / interessierte Laien
- **Stufe 8-9:** F√ºr medizinisches Fachpersonal (√Ñrzt:innen, Pflege)
- **Stufe 10:** F√ºr ergotherapeutische Fachpublikation

**Experimentiere:**
- Wie ver√§ndert sich die Definition auf verschiedenen Stufen?
- Welche Aspekte bleiben gleich, welche werden vereinfacht/komplexer?
- Probiere ungew√∂hnliche Endpunkte aus (z.B. "in Reimform" vs. "wissenschaftlich")

**Beispiel-Prompt:**
"Hier ist die DVE-Definition von Ergotherapie: [Definition einf√ºgen]

Erstelle eine Skala:
- Stufe 1 = F√ºr 5-J√§hrige erkl√§rbar
- Stufe 10 = Wissenschaftliche Fachpublikation

Wo w√ºrdest du die aktuelle Definition einsortieren? Erstelle dann eine Version auf Stufe 4 (f√ºr neue Patient:innen in der Ergotherapie)."

‚úÖ **Praxistauglich:** Diese Erkl√§rungen kannst du f√ºr Flyer, Webseite, Beratungen nutzen!""",
            "hint": "üí≠ Die F√§higkeit, Fachkonzepte auf verschiedenen Niveaus zu erkl√§ren, ist eine Kernkompetenz in der therapeutischen Kommunikation.",
        }
    },
    "Role Prompting": {
        "Ethisches Dilemma reflektieren": {
            "task": """üéØ Lernziel: Nutze Role Prompting f√ºr ethische Reflexion

**Aufgabe:**
Reflektiere ein ethisches Dilemma aus verschiedenen Perspektiven - ohne konkreten Fall!

**Beispiel-Dilemma:**
"Eine Person mit beginnender Demenz m√∂chte weiterhin alleine Auto fahren. Die Angeh√∂rigen sind besorgt um die Sicherheit. Die Person selbst sagt, das Auto sei ihre Freiheit und ohne Auto f√ºhle sie sich eingesperrt."

**Kernkonflikt:** Autonomie vs. Sicherheit

**Perspektiven, die du einnehmen lassen kannst:**

1. **Rolle: Die betroffene Person**
   - Wie erlebt sie die Situation?
   - Was bedeutet Autofahren f√ºr sie?
   - Wie nimmt sie die Sorgen wahr?

2. **Rolle: Angeh√∂rige/Partner:in**
   - Welche √Ñngste und Sorgen bestehen?
   - Was ist ihre Verantwortung?
   - Wie k√∂nnten sie unterst√ºtzen?

3. **Rolle: Ergotherapeut:in**
   - Welche professionelle Haltung ist angemessen?
   - Wie moderiere ich zwischen Autonomie und Sicherheit?
   - Welche bet√§tigungsorientierten L√∂sungen gibt es?

4. **Rolle: Ethiker:in / neutrale:r Beobachter:in**
   - Welche ethischen Prinzipien sind ber√ºhrt?
   - Wie gewichtet man Autonomie vs. Sicherheit?
   - Was w√§re ein fairer Kompromiss?

**Weitere Dilemmata zum √úben:**
- Sturzgefahr vs. Bewegungsfreiheit bei Senior:innen
- Medikamentenmanagement: Selbstst√§ndigkeit vs. korrekte Einnahme
- Arbeitsplatzgestaltung: Leistungsf√§higkeit vs. gesundheitliche Grenzen
- Kindeswohl: F√∂rderung vs. √úberforderung
- Digitale Medien: Teilhabe vs. √úberstimulation

**Experimentiere:**
- Wie detailliert muss die Rollenbeschreibung sein?
- Kannst du die KI bitten, zwischen den Rollen zu wechseln?
- Was passiert, wenn du nach Gemeinsamkeiten der Perspektiven fragst?

**Beispiel-Prompt:**
"Betrachte folgendes ethisches Dilemma: [Dilemma beschreiben]

Nimm nacheinander vier Perspektiven ein:
1. Die betroffene Person selbst
2. Ein/e Angeh√∂rige/r
3. Eine/n Ergotherapeut:in mit bet√§tigungsorientierter Haltung
4. Eine/n Ethiker:in

Beschreibe aus jeder Perspektive: Was ist wichtig? Was wird bef√ºrchtet? Was w√§re eine L√∂sung?

Analysiere am Ende: Wo gibt es Gemeinsamkeiten? Wo unaufl√∂sbare Konflikte?"

‚úÖ **Praxistauglich:** Ethische Reflexion hilft dir, in schwierigen Situationen verschiedene Perspektiven zu w√ºrdigen!""",
            "hint": "üí≠ Das Einnehmen verschiedener Perspektiven sch√§rft dein ethisches Urteilsverm√∂gen und deine Empathie.",
        },
        "Bet√§tigungskonflikt aus verschiedenen Blickwinkeln": {
            "task": """üéØ Lernziel: Nutze Role Prompting f√ºr therapeutische Reflexion

**Aufgabe:**
Betrachte einen Bet√§tigungskonflikt aus verschiedenen therapeutischen Blickwinkeln - generisch!

**Beispiel-Situation:**
"Eine Person m√∂chte wieder arbeiten gehen nach l√§ngerer Krankheit. Die √Ñrzt:innen empfehlen eine Reduktion der Arbeitszeit. Die Person selbst m√∂chte aber Vollzeit arbeiten, weil sie sich sonst 'als halber Mensch' f√ºhlt."

**Perspektiven:**

1. **Rolle: Funktionsorientierte:r Therapeut:in**
   - Fokus auf k√∂rperliche Belastbarkeit
   - Was sagen die medizinischen Befunde?
   - Welche Funktionen m√ºssen trainiert werden?

2. **Rolle: Bet√§tigungsorientierte:r Therapeut:in**
   - Fokus auf bedeutungsvolle Bet√§tigung "Arbeiten"
   - Was bedeutet Arbeit f√ºr die Person?
   - Wie kann die Bet√§tigung erm√∂glicht werden? (Nicht: Wie trainiere ich Funktionen)
   - Welche Anpassungen sind m√∂glich?

3. **Rolle: Systemische:r Therapeut:in**
   - Fokus auf das gesamte System (Familie, Arbeitgeber, soziales Umfeld)
   - Welche Faktoren beeinflussen die Situation?
   - Wer ist alles betroffen?
   - Welche L√∂sungen ber√ºcksichtigen alle Beteiligten?

4. **Rolle: Klient:innenzentrierte:r Therapeut:in**
   - Fokus auf die Ziele und Werte der Person
   - Was ist der Person wichtig?
   - Wie kann ich die Person in ihrer Entscheidung unterst√ºtzen?
   - Welche Ressourcen hat die Person?

**Weitere Situationen zum √úben:**
- Person m√∂chte alleine leben, Angeh√∂rige sehen das kritisch
- Kind m√∂chte wie alle anderen sein, braucht aber Unterst√ºtzung
- Person m√∂chte Auto fahren trotz Einschr√§nkungen
- Person m√∂chte Hobby fortsetzen, das k√∂rperlich belastend ist

**Experimentiere:**
- Beschreibe die Haltungen der verschiedenen therapeutischen Ans√§tze
- Lass die KI die Unterschiede herausarbeiten
- Frage nach einer integrativen Perspektive

**Beispiel-Prompt:**
"Betrachte folgende Situation: [Situation beschreiben]

Analysiere sie aus vier therapeutischen Perspektiven:

1. Funktionsorientierte Ergotherapie (Fokus: Funktionen trainieren)
2. Bet√§tigungsorientierte Ergotherapie (Fokus: Bet√§tigung erm√∂glichen)
3. Systemische Perspektive (Fokus: gesamtes System)
4. Klient:innenzentrierte Perspektive (Fokus: Ziele der Person)

Was w√ºrde jeder Ansatz betonen? Wo sind die Unterschiede? Welche Perspektive erscheint dir am hilfreichsten?"

‚úÖ **Praxistauglich:** Diese Reflexion hilft dir, deinen eigenen therapeutischen Ansatz zu sch√§rfen!""",
            "hint": "üí≠ Verschiedene therapeutische Ans√§tze haben unterschiedliche St√§rken. Role Prompting hilft dir, diese zu verstehen.",
        }
    },
    "Constraint Prompting": {
        "Fachliteratur kompakt zusammenfassen": {
            "task": """üéØ Lernziel: Nutze Constraints f√ºr pr√§gnante Zusammenfassungen

**Aufgabe:**
Fasse Fachliteratur unter strengen L√§ngenvorgaben zusammen.

**Beispiel-Material:**
Ein wissenschaftlicher Artikel √ºber einen therapeutischen Ansatz, eine Studie, ein Buchkapitel

**Experimentiere mit verschiedenen Constraints:**

**Constraint 1: L√§nge**
- "Maximal 100 W√∂rter"
- "Genau 3 S√§tze"
- "Maximal 500 Zeichen (f√ºr Social Media)"
- "Ein Tweet (280 Zeichen)"

**Constraint 2: Inhaltlicher Fokus**
- "Nur die Kernaussage"
- "Nur die praktische Anwendung, keine Theorie"
- "Nur die Evidenz / Studienlage"
- "Nur das, was direkt umsetzbar ist"

**Constraint 3: Zielgruppe**
- "F√ºr Kolleg:innen"
- "F√ºr interessierte Laien"
- "F√ºr eine Teambesprechung (2 Minuten Redezeit)"

**Kombiniere mehrere Constraints:**
- "Maximal 100 W√∂rter + Fokus auf praktische Anwendung + f√ºr Kolleg:innen"
- "Genau 3 S√§tze + nur Kernaussage + f√ºr Teambesprechung"

**Themen zum √úben:**
- CO-OP Ansatz
- Sensorische Integrationstherapie
- CMOP-E Modell
- Evidenz f√ºr Ergotherapie bei Schlaganfall
- Bet√§tigungsorientierung vs. Funktionsorientierung

**Beispiel-Prompt (einfach):**
"Fasse den CO-OP Ansatz in maximal 100 W√∂rtern zusammen."

**Beispiel-Prompt (komplex):**
"Fasse den CO-OP Ansatz zusammen. Constraints:
- Maximal 100 W√∂rter
- Fokus NUR auf die praktische Anwendung (keine Theorie)
- F√ºr eine Teambesprechung mit Kolleg:innen
- Erkl√§re es so, dass jemand es direkt ausprobieren k√∂nnte"

‚úÖ **Praxistauglich:** Kompakte Zusammenfassungen brauchst du f√ºr Teambesprechungen, Dokumentation, Fortbildungen!""",
            "hint": "üí≠ Je mehr Constraints du setzt, desto fokussierter wird das Ergebnis. Aber: Zu viele Constraints k√∂nnen auch zu restriktiv sein!",
        },
        "Komplexe Konzepte vereinfachen": {
            "task": """üéØ Lernziel: Nutze Constraints f√ºr zielgruppengerechte Erkl√§rungen

**Aufgabe:**
Erkl√§re komplexe ergotherapeutische Konzepte f√ºr verschiedene Zielgruppen unter Einhaltung strenger Vorgaben.

**Beispiel-Konzept:**
"Bet√§tigungsorientierung" - ein Kernkonzept der Ergotherapie, aber schwer zu erkl√§ren!

**Constraint-Typen die du kombinieren kannst:**

**Sprachliche Constraints:**
- "Keine Fachbegriffe"
- "Nur einfache Haupts√§tze, keine Nebens√§tze"
- "Keine Fremdw√∂rter"
- "Keine Passiv-Konstruktionen"
- "Nur W√∂rter, die ein 10-J√§hriger kennt"

**Strukturelle Constraints:**
- "Maximal 5 S√§tze"
- "Mit einem konkreten Beispiel"
- "Als Frage und Antwort"
- "Als Geschichte"

**Inhaltliche Constraints:**
- "Ohne Theorie, nur praktisch"
- "Ohne Negationen (nicht sagen was es NICHT ist)"
- "Mit Alltagsbeispielen"

**Tonale Constraints:**
- "Ermutigend, nicht belehrend"
- "Neutral, sachlich"
- "Warm, empathisch"

**Konzepte zum √úben:**
- Bet√§tigungsorientierung
- Klientenzentrierung
- Umweltanpassung vs. Personentraining
- Top-down vs. Bottom-up Ansatz
- Bet√§tigungsperformanz

**Zielgruppen:**
- F√ºr neue Klient:innen (ersten Termin)
- F√ºr Angeh√∂rige
- F√ºr √Ñrzt:innen (die Ergotherapie verordnen)
- F√ºr Kinder (8-12 Jahre)
- F√ºr Menschen mit kognitiven Einschr√§nkungen

**Beispiel-Prompt (einfach):**
"Erkl√§re 'Bet√§tigungsorientierung' in maximal 5 S√§tzen ohne Fachbegriffe."

**Beispiel-Prompt (komplex):**
"Erkl√§re 'Bet√§tigungsorientierung' f√ºr neue Klient:innen. Constraints:
- Maximal 5 S√§tze
- Keine Fachbegriffe oder Fremdw√∂rter
- Mit einem konkreten Alltagsbeispiel
- Ermutigend, nicht belehrend
- Erkl√§re, WARUM das wichtig ist (nicht nur WAS es ist)"

‚úÖ **Praxistauglich:** Diese Erkl√§rungen brauchst du t√§glich in der Beratung und Aufkl√§rung!""",
            "hint": "üí≠ Die F√§higkeit, komplexe Konzepte einfach zu erkl√§ren, zeigt, dass du sie wirklich verstanden hast!",
        }
    }
}

technique_intros = {
    "Zero-Shot Prompting": {
        "title": "Zero-Shot Prompting üéØ",
        "description": """**Eine klare Anweisung, ohne Beispiele.**

Du sagst der KI direkt, was du m√∂chtest - pr√§zise und strukturiert. Je klarer deine Anweisung, desto besser das Ergebnis.

**Wann nutzen?** F√ºr standardisierte Materialien, klare Aufgaben, strukturierte Inhalte."""
    },
    "One-Shot Prompting": {
        "title": "One-Shot Prompting üìù",
        "description": """**Ein Beispiel als Schablone.**

Du zeigst der KI einmal, wie das Ergebnis aussehen soll. Sie nutzt dieses Muster f√ºr weitere Aufgaben.

**Wann nutzen?** F√ºr einheitliche Formate, Serien von Materialien, konsistente Strukturen."""
    },
    "Few-Shot Prompting": {
        "title": "Few-Shot Prompting üéØüéØüéØ",
        "description": """**Mehrere Beispiele etablieren ein Muster.**

Du gibst 2-5 Beispiele, aus denen die KI das Muster erkennt und auf neue Inhalte √ºbertr√§gt.

**Wann nutzen?** F√ºr komplexere Transformationen, Analysen, kreative Aufgaben."""
    },
    "Chain-of-Thought Prompting": {
        "title": "Chain-of-Thought Prompting üîÑ",
        "description": """**Schritt f√ºr Schritt zum Ziel.**

Du teilst komplexe Aufgaben in logische Denkschritte auf. Die KI arbeitet systematisch jeden Schritt ab.

**Wann nutzen?** F√ºr komplexe Recherchen, Analysen, strukturierte Planungen."""
    },
    "Skala Prompting": {
        "title": "Skala Prompting üìä",
        "description": """**Inhalte gezielt anpassen.**

Du definierst eine Skala (z.B. Sprachniveau 1-10) und verschiebst Inhalte entlang dieser Skala.

**Wann nutzen?** F√ºr verschiedene Zielgruppen, Sprachniveaus, Komplexit√§tsgrade."""
    },
    "Role Prompting": {
        "title": "Role Prompting üé≠",
        "description": """**Perspektivwechsel durch Rollen.**

Du weist der KI eine Rolle zu (z.B. "Du bist eine erfahrene Ergotherapeutin mit bet√§tigungsorientierter Haltung"). Die KI nimmt diese Perspektive ein.

**Wann nutzen?** F√ºr Reflexion, verschiedene Blickwinkel, ethische Dilemmata."""
    },
    "Constraint Prompting": {
        "title": "Constraint Prompting üéØ",
        "description": """**Klare Grenzen setzen.**

Du gibst der KI strikte Vorgaben (L√§nge, Stil, verbotene Begriffe, Struktur). Sie h√§lt sich daran.

**Wann nutzen?** F√ºr pr√§gnante Texte, zielgruppengerechte Sprache, fokussierte Inhalte."""
    }
}

def display_task_with_hint(technique, exercise):
    """Zeigt Aufgabe mit optionalem Hint-Expander"""
    st.markdown(task_messages[technique][exercise]["task"])
    
    # Nur wenn explizit ein Hint vorhanden ist
    if "hint" in task_messages[technique][exercise]:
        with st.expander("üí° Tipp", expanded=False):
            st.markdown(task_messages[technique][exercise]["hint"])

def get_teacher_feedback(technique, exercise=None):
    """Generiert kontextspezifisches Feedback vom Teacher als strukturiertes JSON"""
    import json
    import time

    current_task = task_messages[technique]
    if isinstance(current_task, dict):
        current_task = current_task[exercise]["task"] if exercise else current_task["task"]

    teacher_prompt = f"""Gib mir ein strukturiertes Feedback zu folgender √úbung.

WICHTIG: Antworte AUSSCHLIESSLICH mit einem validen JSON-Objekt. Kein zus√§tzlicher Text davor oder danach!

Aktuelle Technik: {technique}
Aktuelle Aufgabe: {current_task}

Setze in deinem Feedback den Fokus haupts√§chlich auf meinen letzten Promptingversuch. Wenn es f√ºr meinen Lernerfolg sinnvoll ist, beziehe aber auch Unterschiede, Verbesserungen oder Verschlechterungen zu vorherigen Versuchen in den Blick. Tue dies aber nur, wenn es didaktisch zielf√ºhrend ist.

Gespr√§chsverlauf:
{str(st.session_state.displayed_messages)}

Antworte mit folgendem JSON-Format:
{{
    "gesamtbewertung": "Eine kurze Zusammenfassung (1-2 S√§tze)",
    "staerken": [
        "St√§rke 1",
        "St√§rke 2"
    ],
    "verbesserungspotenzial": [
        "Verbesserungsvorschlag 1",
        "Verbesserungsvorschlag 2"
    ],
    "konkrete_tipps": [
        "Konkreter Tipp 1",
        "Konkreter Tipp 2"
    ],
    "beispiel_prompt": "Ein verbesserter Beispiel-Prompt (optional)"
}}

Antworte NUR mit dem JSON-Objekt, ohne Markdown-Formatierung oder zus√§tzlichen Text!"""

    teacher_messages = [
        {"role": "system", "content": st.session_state.teacher_sys_prompt},
        {"role": "user", "content": teacher_prompt}
    ]

    # Versuche bis zu 2x bei Fehlern
    for attempt in range(2):
        try:
            feedback_raw = llm_provider.call_llm(
                model=st.session_state.teacher_model if attempt == 0 else st.session_state.teacher_model_if_error,
                temperature=st.session_state.teacher_temp,
                messages=teacher_messages
            )

            # Versuche JSON zu parsen
            # Entferne m√∂gliche Markdown-Code-Bl√∂cke
            feedback_clean = feedback_raw.strip()
            if feedback_clean.startswith("```json"):
                feedback_clean = feedback_clean[7:]
            if feedback_clean.startswith("```"):
                feedback_clean = feedback_clean[3:]
            if feedback_clean.endswith("```"):
                feedback_clean = feedback_clean[:-3]
            feedback_clean = feedback_clean.strip()

            feedback_json = json.loads(feedback_clean)

            # Speichere strukturiertes Feedback
            st.session_state.teacher_messages.append({
                "role": "assistant",
                "content": feedback_json
            })

            return feedback_json

        except json.JSONDecodeError:
            # Bei JSON-Fehler: Warte kurz und versuche es mit Fallback-Modell
            if attempt == 0:
                time.sleep(2)
                continue
            else:
                # Beim zweiten Fehlschlag: Gib Fehler zur√ºck
                return {
                    "gesamtbewertung": "Fehler beim Generieren des Feedbacks. Bitte versuche es erneut.",
                    "staerken": [],
                    "verbesserungspotenzial": [],
                    "konkrete_tipps": ["Klicke erneut auf 'Feedback holen'"],
                    "beispiel_prompt": None
                }
        except Exception as e:
            # Bei anderen Fehlern: Warte und retry
            if attempt == 0:
                time.sleep(2)
                continue
            else:
                return {
                    "gesamtbewertung": f"Fehler: {str(e)}. Bitte versuche es erneut.",
                    "staerken": [],
                    "verbesserungspotenzial": [],
                    "konkrete_tipps": ["Klicke erneut auf 'Feedback holen'"],
                    "beispiel_prompt": None
                }

# Seitenleiste - Clean und fokussiert
with st.sidebar:
    st.header("üéØ W√§hle eine Technik")
            
    technique = st.selectbox(
        "Prompting-Technik:",
        ["Zero-Shot Prompting",
         "One-Shot Prompting",
         "Few-Shot Prompting",
         "Chain-of-Thought Prompting",
         "Skala Prompting",
         "Role Prompting",
         "Constraint Prompting"],
        label_visibility="collapsed"
    )

    if technique == "Zero-Shot Prompting":
        exercise = st.selectbox(
            "√úbung:",
            ["Informationsblatt Ergonomie",
             "Traumreise",
             "Beratungskonzept strukturieren"]
        )
    elif technique == "One-Shot Prompting":
        exercise = st.selectbox(
            "√úbung:",
            ["√úbungsanleitung erstellen",
             "Infomaterial-Serie"]
        )
    elif technique == "Few-Shot Prompting":
        exercise = st.selectbox(
            "√úbung:",
            ["Bet√§tigungsanalyse",
             "Aktivit√§tenpool erstellen"]
        )
    elif technique == "Chain-of-Thought Prompting":
        exercise = st.selectbox(
            "√úbung:",
            ["Aushang Leichte Sprache",
             "Hilfsmittel recherchieren",
             "Literatur erschlie√üen"]
        )
    elif technique == "Skala Prompting":
        exercise = st.selectbox(
            "√úbung:",
            ["Was ist Bet√§tigung?",
             "Was ist Ergotherapie?"]
        )
    elif technique == "Role Prompting":
        exercise = st.selectbox(
            "√úbung:",
            ["Ethisches Dilemma reflektieren",
             "Bet√§tigungskonflikt aus verschiedenen Blickwinkeln"]
        )
    elif technique == "Constraint Prompting":
        exercise = st.selectbox(
            "√úbung:",
            ["Fachliteratur kompakt zusammenfassen",
             "Komplexe Konzepte vereinfachen"]
        )
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚úì Los geht's", use_container_width=True):
            st.session_state.messages = [
                {"role": "system", "content": st.session_state.sop_sys_prompt}]

            st.session_state.current_technique = technique
            st.session_state.current_exercise = exercise

            st.session_state.displayed_messages = []

            chat_ui.show_success_message(f"Starte {technique}!")

    with col2:
        if st.button("üîÑ Neu", use_container_width=True):
            st.session_state.messages = [
                {"role": "system", "content": st.session_state.sop_sys_prompt}]

            st.session_state.current_technique = technique
            st.session_state.current_exercise = exercise

            st.session_state.displayed_messages = []
            chat_ui.show_success_message("Neustart!")

    st.markdown("---")
        
    def display_teacher_feedback(feedback):
        """Zeigt strukturiertes Teacher-Feedback responsiv an"""
        if isinstance(feedback, dict):
            # Gesamtbewertung
            st.markdown("### üìä Gesamtbewertung")
            st.info(feedback.get("gesamtbewertung", "Keine Bewertung vorhanden"))

            col1, col2 = st.columns(2)

            # St√§rken
            with col1:
                st.markdown("### ‚úÖ St√§rken")
                staerken = feedback.get("staerken", [])
                if staerken:
                    for staerke in staerken:
                        st.success(f"‚Ä¢ {staerke}")
                else:
                    st.caption("Keine St√§rken identifiziert")

            # Verbesserungspotenzial
            with col2:
                st.markdown("### üéØ Verbesserungspotenzial")
                verbesserungen = feedback.get("verbesserungspotenzial", [])
                if verbesserungen:
                    for verb in verbesserungen:
                        st.warning(f"‚Ä¢ {verb}")
                else:
                    st.caption("Keine Verbesserungen n√∂tig")

            # Konkrete Tipps
            st.markdown("### üí° Konkrete Tipps")
            tipps = feedback.get("konkrete_tipps", [])
            if tipps:
                for idx, tipp in enumerate(tipps, 1):
                    st.markdown(f"**{idx}.** {tipp}")
            else:
                st.caption("Keine Tipps vorhanden")

            # Beispiel-Prompt (optional)
            if feedback.get("beispiel_prompt"):
                st.markdown("### üìù Beispiel-Prompt")
                st.code(feedback["beispiel_prompt"], language=None)
        else:
            # Fallback f√ºr Nicht-JSON-Feedback
            st.markdown(str(feedback))

    @st.dialog("üéì Teacher", width="large")
    def teacher():
        if st.button("üí° Feedback holen", help="Lass dir Tipps geben", use_container_width=True):
            with st.spinner("üéì Teacher analysiert..."):
                feedback = get_teacher_feedback(technique, exercise)
                display_teacher_feedback(feedback)

        with st.expander("üìö Bisheriges Feedback", False):
            if st.session_state.teacher_messages:
                for idx, msg in enumerate(st.session_state.teacher_messages):
                    st.markdown(f"#### Feedback #{idx+1}")
                    display_teacher_feedback(msg["content"])
                    if idx < len(st.session_state.teacher_messages) - 1:
                        st.markdown("---")
            else:
                st.info("Noch kein Feedback vorhanden.")

    if st.button("üéì Teacher", use_container_width=True):
        teacher()

    st.markdown("---")

    # Erweiterte Einstellungen (Modelle & Systemprompt)
    with st.expander("‚öôÔ∏è Erweiterte Einstellungen", expanded=False):
        st.info("‚ÑπÔ∏è **Hinweis:** Alle √Ñnderungen gelten nur f√ºr diese Session. Die Datenbank wird nicht ver√§ndert.")

        # Tab-Navigation f√ºr bessere √úbersicht
        tab1, tab2 = st.tabs(["ü§ñ Modelle", "üìù Systemprompt"])

        with tab1:
            st.markdown("#### Modell-Auswahl")
            st.info("üí° **Empfohlen:** Haiku 4.5 f√ºr √úbungen (schnell & g√ºnstig), Sonnet 4.5 f√ºr Teacher (besseres Feedback)")

            # Verf√ºgbare Modelle
            available_models = [
                "claude-haiku-4-5-20251001",
                "claude-sonnet-4-5-20250929",
                "claude-3-5-haiku-20241022",
                "gpt-4.1",
                "gpt-4.1-mini",
                "gpt-4.1-nano",
                "gpt-4o",
                "gpt-4o-mini"
            ]

            # Modell f√ºr Assistent (√úbungen)
            st.markdown("**Assistent (f√ºr √úbungen):**")

            # Finde den aktuellen Index f√ºr sop_model
            try:
                current_sop_index = available_models.index(st.session_state.sop_model)
            except ValueError:
                current_sop_index = 0

            new_sop_model = st.selectbox(
                "Hauptmodell:",
                available_models,
                index=current_sop_index,
                key="select_sop_model"
            )

            # Finde den aktuellen Index f√ºr sop_model_if_error
            try:
                current_sop_error_index = available_models.index(st.session_state.sop_model_if_error)
            except ValueError:
                current_sop_error_index = 1

            new_sop_model_if_error = st.selectbox(
                "Fallback-Modell:",
                available_models,
                index=current_sop_error_index,
                key="select_sop_model_if_error"
            )

            st.markdown("---")

            # Modell f√ºr Teacher
            st.markdown("**Teacher (f√ºr Feedback):**")

            # Finde den aktuellen Index f√ºr teacher_model
            try:
                current_teacher_index = available_models.index(st.session_state.teacher_model)
            except ValueError:
                current_teacher_index = 1

            new_teacher_model = st.selectbox(
                "Hauptmodell:",
                available_models,
                index=current_teacher_index,
                key="select_teacher_model"
            )

            # Finde den aktuellen Index f√ºr teacher_model_if_error
            try:
                current_teacher_error_index = available_models.index(st.session_state.teacher_model_if_error)
            except ValueError:
                current_teacher_error_index = 0

            new_teacher_model_if_error = st.selectbox(
                "Fallback-Modell:",
                available_models,
                index=current_teacher_error_index,
                key="select_teacher_model_if_error"
            )

            # Zeige aktuell aktive Modelle
            st.markdown("---")
            st.markdown("**üìã Aktuell aktiv:**")
            st.caption(f"Assistent: {st.session_state.sop_model}")
            st.caption(f"Teacher: {st.session_state.teacher_model}")

            col1, col2 = st.columns(2)
            with col1:
                if st.button("üíæ Speichern", use_container_width=True, key="save_models"):
                    st.session_state.sop_model = new_sop_model
                    st.session_state.sop_model_if_error = new_sop_model_if_error
                    st.session_state.teacher_model = new_teacher_model
                    st.session_state.teacher_model_if_error = new_teacher_model_if_error
                    st.success("‚úÖ Modelle aktualisiert!")
                    st.rerun()

            with col2:
                if st.button("üîÑ Zur√ºcksetzen", use_container_width=True, key="reset_models"):
                    # Lade Original-Modelle aus der Datenbank
                    original_sop_bot = db.get_bot("Assistent")
                    original_teacher_bot = db.get_bot("Teacher")
                    st.session_state.sop_model = original_sop_bot["model"]
                    st.session_state.sop_model_if_error = original_sop_bot["model_if_error"]
                    st.session_state.teacher_model = original_teacher_bot["model"]
                    st.session_state.teacher_model_if_error = original_teacher_bot["model_if_error"]
                    st.success("‚úÖ Auf Original zur√ºckgesetzt!")
                    st.rerun()

        with tab2:
            st.markdown("#### Systemprompt anpassen")
            st.warning("‚ö†Ô∏è **Achtung:** √Ñnderungen am Systemprompt k√∂nnen das Verhalten des Assistenten grundlegend ver√§ndern. Nur √§ndern, wenn du verstehst, was du tust!")

            st.info("üí° Der Systemprompt definiert die grundlegende Rolle und das Verhalten des Assistenten. Er wird bei jedem Gespr√§ch als erste Nachricht gesendet.")

            # Aktuellen Systemprompt anzeigen und bearbeiten lassen
            new_sys_prompt = st.text_area(
                "Systemprompt:",
                value=st.session_state.sop_sys_prompt,
                height=200,
                help="Hier kannst du den Systemprompt anpassen. √Ñnderungen gelten ab dem n√§chsten Chat-Neustart."
            )

            col1, col2 = st.columns(2)
            with col1:
                if st.button("üíæ Speichern", use_container_width=True, key="save_sysprompt"):
                    st.session_state.sop_sys_prompt = new_sys_prompt
                    # Aktualisiere auch die erste Nachricht in messages
                    st.session_state.messages[0] = {"role": "system", "content": new_sys_prompt}
                    st.success("‚úÖ Systemprompt aktualisiert!")

            with col2:
                if st.button("üîÑ Zur√ºcksetzen", use_container_width=True, key="reset_sysprompt"):
                    # Lade den Original-Systemprompt aus der Datenbank
                    original_bot = db.get_bot("Assistent")
                    st.session_state.sop_sys_prompt = original_bot["sys_prompt"]
                    st.session_state.messages[0] = {"role": "system", "content": original_bot["sys_prompt"]}
                    st.success("‚úÖ Auf Original zur√ºckgesetzt!")
                    st.rerun()

def display_chat():
    """Display chat messages with modern styling"""
    chat_ui.display_modern_chat_messages(st.session_state.displayed_messages, show_system=False)

def process_input():
    """Process user input with modern UI feedback"""
    if prompt := chat_ui.create_chat_input_with_placeholder("Schreib deinen Prompt hier..."):
        st.session_state.displayed_messages.append({"role": "user", "content": prompt})
        st.session_state.messages.append({"role": "user", "content": prompt})

        with st.chat_message("user", avatar=chat_ui.get_avatar("user")):
            st.markdown(prompt)

        with st.chat_message("assistant", avatar=chat_ui.get_avatar("assistant")):
            with st.spinner("üí≠ Denke nach..."):
                try:
                    full_response = llm_provider.call_llm(
                        model=st.session_state.sop_model,
                        temperature=st.session_state.sop_temp,
                        messages=st.session_state.messages
                    )
                    st.markdown(full_response)
                except:
                    try:
                        st.info(f"‚ö†Ô∏è Wechsle zu Fallback-Modell: {st.session_state.sop_model_if_error}")
                        full_response = llm_provider.call_llm(
                            model=st.session_state.sop_model_if_error,
                            temperature=st.session_state.sop_temp,
                            messages=st.session_state.messages
                        )
                        st.markdown(full_response)
                    except Exception as e:
                        error_msg = f"Fehler: {str(e)}"
                        chat_ui.show_error_message(error_msg)
                        full_response = "Entschuldigung, es gab einen Fehler."
                        st.markdown(full_response)

        st.session_state.displayed_messages.append({"role": "assistant", "content": full_response})
        st.session_state.messages.append({"role": "assistant", "content": full_response})


if "current_technique" in st.session_state and "current_exercise" in st.session_state:
    technique = st.session_state.current_technique
    exercise = st.session_state.current_exercise
    
    # Technik-Beschreibung - kurz und direkt
    st.markdown(f"## {technique_intros[technique]['title']}")
    st.markdown(technique_intros[technique]['description'])
    
    st.markdown("---")
    
    # Aufgabe - mit optionalem Hint
    st.markdown("### üéØ Deine Aufgabe")
    display_task_with_hint(technique, exercise)

# Chat anzeigen
display_chat()
process_input()